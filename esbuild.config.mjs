import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import { config } from 'dotenv';

config();

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

// Plugin to replace Node.js built-in modules with empty modules
const emptyModulePlugin = {
  name: 'empty-module',
  setup(build) {
    build.onResolve({ filter: /^node:/ }, (args) => ({
      path: args.path.replace(/^node:/, ''),
      namespace: 'empty-module',
    }));

    build.onLoad({ filter: /.*/, namespace: 'empty-module' }, () => ({
      contents: 'export default {}; export const ReadStream = class {}; export const Readable = class {}; export const ReadableStream = class {};',
      loader: 'js',
    }));
  },
};

const buildOptions = {
  banner: {
    js: banner,
  },
  entryPoints: ['src/main.ts'],
  bundle: true,
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins,
  ],
  format: 'cjs',
  target: 'es2021',
  platform: 'browser',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'build/main.js',
  define: {
    'process.env.NODE_ENV': prod ? '"production"' : '"development"',
    'process.env.OPENAI_API_KEY': JSON.stringify(process.env.OPENAI_API_KEY || ''),
    'process.env.OPENAI_API_KEY_DEV': JSON.stringify(process.env.OPENAI_API_KEY_DEV_FROM_SHELL || null),
    'process.env.GOOGLE_API_KEY_DEV': JSON.stringify(process.env.GOOGLE_API_KEY_DEV_FROM_SHELL || null),
    'process.env.PRESET_ASSISTANT_ID': JSON.stringify('asst_oPHViKRn9BzTPCEP5TAzFIIP')
  },
  plugins: [emptyModulePlugin],
  jsx: 'automatic',
  jsxImportSource: 'react',
};

if (prod) {
  await esbuild.build(buildOptions);
  process.exit(0);
} else {
  await esbuild.build(buildOptions); // One-off dev build
  process.exit(0);
} 